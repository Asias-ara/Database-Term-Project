기본키 - Null이 될 수 없다

외래키 : 다른 곳에서는 기본키
 - 외래키가 기본키를 참조한다
 - WORKS_ON -> 두개의 외래키가 기본키의 역할을 한다
 - 참조 관계에 있다


관계형 데이터 모델 : 표로 데이터를 표현한다
 - 릴레이션, 릴레이션을 구성하는 애트리뷰트 로만 구성됨
 - 위 두가지가 표를 의미하기에 표로 표현
 - 하나의 표가 아니라 여러개의 표로 구현

관계제약조건 : 관계형 데이터 모델들이 반드시 지켜야 한다
 - 위반하는 상태가 되었을 경우 : DBMS에서 위반이 발생하지 않도록 조치를 해야한다

엔티티 무결성 제약조건 -> 기본키에는 NULL이 포함될 수 없음
참조 무결성 제약조건 -> 참조관계가 있을 때 참조되는 곳에 값이 있어야한다
			-> ER모델에서 없는 부서가 없도록 관계를 맺도록 하였다. 
			     (그런 느낌이다)
		     -> 외래키에는 NULL이 들어가도 된다(Ex. 소속된 부서가 없다)
			->선택적 참여를 의미, 의무적 참여라면 NULL이 있으면 안된다
도메인 제약조건 -> 애트리뷰트에는 도메인이 있고, 도메인에는 저장될수있는 값의 범위와 타입이 있는데, 그 값을 벗어난 값이 저장되면 안된다
키 제약조건 -> 중복이 있어서는 안된다., 식별자로 사용할꺼다. 슈퍼키/캔디데이트키/프라이머리 키

//------------------
데이터베이스 연산 -> 검색, 삽입, 삭제

검색(조회) : 데이터베이스의 상태 변화가 없음 -> 관계제약조건를 생각할 필요 없음

삽입
 - insert가 일어남 -> 상태가 변화
 - 위반사항이 어떤것이 있을까? (있다면 DBMS는 이것을 체크 해야한다)
	- 도메인 제약조건 : 발생시킬 수 있다.
	- 키 제약조건 : 발생시킬 수 있다. (중복된 키가 존재)
	- 엔티티 제약조건 : 발생시킬 수 있다.(기본키에 NULL이 있을 수 있다)
	- 참조 제약조건 : 발생시킬 수 있다
 - 삽입시에 제약조건 4가지를 모두 확인해야한다.
 - 조치사항 : '거부' 혹은 '위반 사항 알림'

삭제
 - delete가 일어남 -> 상태가 변화
 - 위반사항이 어떤것이 있을까?
	- 도메인 제약조건 : 없다.
	- 키 제약조건 : 없다.
	- 엔티티 제약조건 : 없다
	- 참조 제약조건 : 발생시킬 수 있다.
 - 조치사항 : 삭제를 거부(Ex. 시위), 외래키를 바꾸거나 Null로 변환(Ex. 전과), 참조하는 튜플들 모두 삭제
	(Ex 배경. 과가 삭제된다면 학생들은 어떻게 할까)

갱신
 - 삽입 후 다시 삭제랑 같음
 - 모든 제약조건을 알아봐야 됨


// --------------------------------------------------------------------------------
개념적 설계 단계 -> 논리적 설계 단계 -> 물리적 설계 단계
(논리적 설계 단계 : 개념적 스키마(ER 스키마) -> 논리적 설계 -> 논리적 스키마(관계 데이터베이스 스키마))
	-> 7가지 단계가 존재

ER모델 구성요소 : 엔티이, Relationship, attribute
관계형 데이터 모델 구성요소 : Relation, attribute -> 다치 애트리뷰트 허용 안함

변환 단계
 1. 강한 엔티티 타입
 2. 약한 엔티티 타입
	- 다치 엔트리뷰트만 여기 위의 단계에서 변환이 안된다

 3. 1 : 1
 4. 1 : N
 5. M : N

 6. 3진 관계

 7. 다치 애트리뷰트
// -------------------------------
1. 강한 엔티티 타입과 단일 값 애트리뷰트
 - 모든 릴레이션에는 primary key가 있어야 한다

2. 약한 엔티티 타입과 단일 값 애트리 뷰트
 - 부양가족
 - 종속관계(부모)의 primary key와 자신의 약한 key가 기본키가 된다

3. 1:1 관계 타입
 - 방법 1, 2 : 두개의 릴레이션 중 하나를 선택해서 외래키를 추가하자
 - 방법 3 : 관계를 나타내는 릴레이션을 하나 더 만들자(기본키로는 두 릴레이션 중하나를 가져온다)
 - 방법 4 : 하나의 릴레이션으로 합치기 -> 엔티티 무결성 제약조건을 발생 시킬 수 있음
			-> 선택적 참여가 아닌 의무적 참여일 때 사용 가능(둘 중 선택적 참여를 하는 곳이 키가 된다)

4. 1:N 관계 타입
 - 방법 1 : N쪽에다가 1쪽의 기본키를 외래키로 삽입하는 것
 - 방법 2 : 별도의 릴레이션을 만드는 것(N쪽의 기본키가 여기서의 기본키가 됨)
 
 *순환 관계 타입
	- N쪽에다가 1쪽의 기본키를 외래키로 집어 넣는다

5. M:N 관계 타입
 - 새로운 릴레이션을 만드는 방법말고는 없다
 - 키 애트리뷰트는 양쪽에서 온 기본키 모두를 사용한다

6. 3진 관계 타입
 - 새로운 릴레이션을 만들고 외래키(N에 해당하는)로 온 모든것을 기본키로 사용한다

7. 다치애트리뷰트
 - 관계형 데이터 모델은 다치 애트리뷰트를 허용하지 않는다
 - 새로운 릴레이션으로 표현됨
 - 다치애트리뷰트를 뺀 앤티티와 애트리뷰트로 릴레이션을 만들고,
	다치 애트리뷰트의 애트리뷰트와 기본키를 가지고 릴레이션을 하나 더 만든다

관계형 애트리뷰트 역시 지원을 해주지 않으므로 풀어서 애트리뷰트로 만들면 된다

릴레이션의 숫자가 늘어나지 않는 것이 좋다!!!!!















